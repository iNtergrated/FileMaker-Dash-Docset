#!/usr/local/bin/php
<?php

require_once ( "vendor/autoload.php");
// ob_end_flush();
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\Filesystem\Filesystem;
use Keboola\Csv\CsvFile;
use Colors\Color;

$color = new Color();
$bundle = new Filesystem();
/*
 * Configuration
 */

define ( 'DOCSET_NAME', 'FileMaker');
define ( 'DOCSET_BUNDLE', DOCSET_NAME . '.docset');
define ( 'DOCSET_DESTINATION', __DIR__ . '/build/');
define ( 'FILEMAKER_BUNDLE', __DIR__ . '/FileMaker Help');

/* The directory containing the FileMaker Help Files */
// $sourcePath = FILEMAKER_BUNDLE . '/Contents/Resources/en.lproj/FileMaker Pro Help';
$sourcePath = FILEMAKER_BUNDLE . '/Resources';
$htmlPath = $sourcePath . '/FMP_Help/';
// $htmlPath = $sourcePath . '/';
$path = $htmlPath;

/* Make sure the FileMaker Help bundle is in the project root. */
if ( ! $bundle->exists( FILEMAKER_BUNDLE ))
{
    echo $color( "FileMaker Help Bundle missing!\n" )->red->bold;
    echo $color( " --> Copy \"FileMaker Help.bundle\" to this directory.\n" )->blue;
    die;
}

$htmlFiles = new DirectoryIterator ( $path );

$html_content = new Crawler();
/* Loop through an create the csv and add anchors. */
$i = 0;

echo $color( "Processing files...\n" )->green->bold;

$types = [
    'Command'   => '/script-steps-reference.html#',
    'Functions' => '/functions-reference.html#',
    'Events'    => '/script-triggers-reference.html#',
];

foreach ( $htmlFiles as $file ) {
    $current_type = null;

     /* Ignore ['./', '../']' */
    if ( $file->isDot() ) continue;

    $current_file =  $file->getFilename();

    if ( preg_match ( "/\.htm.$/", $current_file )) {

        $file_content = file_get_contents($path . $current_file);
        $html_content = new Crawler ( $file_content );

        $title = $html_content->filterXPath('//head/title')->text();
                
        /* Only generate data for the specific types. */
        foreach ( $types as $type => $match )
        {
            $current_type = strpos ( $file_content, $match ) ? $type : $current_type;
        }

        if ( ! is_null ( $current_type ))
        {
            $indexOutput[$i]['name'] = $title;
            $indexOutput[$i]['type'] = $current_type;
            $indexOutput[$i]['path'] = '/FMP_Help/' . $current_file;
        }
    }
    $i++;
}
    
if ( empty( $indexOutput )) {
    echo $color( " - No valid matches.\n" )->red->bold;
    echo $color( " - Index could not be built.\n" )->red->bold;
    die;
}

echo $color( "Building " . DOCSET_NAME . " docset...\n" )->green->bold;

/* Cleanup up any existing docset */
if ( $bundle->exists ( DOCSET_DESTINATION . DOCSET_BUNDLE ))
{
    echo $color( "   Deleting old " . DOCSET_BUNDLE . "...\n" )->red->bold;
    $bundle->remove ( DOCSET_DESTINATION . DOCSET_BUNDLE );
}

/* Create Docset Bundle Structure */
try
{
    $bundle->mkdir( DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/', 0777 );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy Icon */
try
{
    $bundle->copy( __DIR__ . '/resources/icon.png', DOCSET_DESTINATION . DOCSET_BUNDLE . '/icon.png' );
    $bundle->copy( __DIR__ . '/resources/icon@2x.png', DOCSET_DESTINATION . DOCSET_BUNDLE . '/icon@2x.png' );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy plist */
try
{
    $bundle->copy( __DIR__ . '/resources/Info.plist', DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Info.plist' );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy Bundle Help Files */
try {
    $bundle->mirror ( $sourcePath, DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents');
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy Updated CSS */
try {
    $bundle->copy ( __DIR__ . '/resources/webworks.css', DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/css/webworks.css', true );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

$indexFilename = 'docSet.dsidx';
$indexPath = DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/' . $indexFilename;
$colorsvIndexFilename = $indexFilename . 'csv';
$colorsvIndexPath = DOCSET_DESTINATION . DOCSET_BUNDLE . '/' . $indexFilename . '.csv.';

/* Delete any existing docset index. */
if ( file_exists ( $indexPath ))
{
    echo $color( "   Deleting existing $indexFilename...\n" )->red->bold;
    $bundle->remove( $indexPath );
}

/* Create docset index. */
echo $color( "   Generating index: $indexFilename...\n" )->green;

if ( $db = new SQLite3( $indexPath ))
{
    /* Create searchIndex Table */
    $colorreateQuery = "CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);";
    $colorreateQueryResults = @$db->query( $colorreateQuery );

    /* Check results of query. */
    if ( $colorreateQueryResults === false ) {
        echo $color( "   ERROR: Table creation failed. Generating CSV file: $colorsvIndexFilename...\n" )->red->bold;
        $colorsvFile = new CsvFile ( $colorsvIndexPath );
        foreach ( $indexOutput as $row ) {
            $colorsvFile->writeRow($row);
        }
    }

    /* Add indexing results to new table. */
    foreach ( $indexOutput as $row )
    {
        $insertQuery = "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('" . $row['name'] ."','" . $row['type'] . "','" . $row['path'] . "');";
        $insertQueryResults = @$db->query ( $insertQuery );
        if ( $insertQueryResults === false )
        {
            $insertError[] = $err;
        }
    }
} else {
    die($err);
}

echo $color( "Docset generation complete!\n" )->green->bold;
echo $color( "    " . $bundle->makePathRelative ( DOCSET_DESTINATION . DOCSET_BUNDLE, __DIR__ ) )->green . PHP_EOL;