#!/usr/local/bin/php
<?php

require_once ( "vendor/autoload.php");
// ob_end_flush();
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\Filesystem\Filesystem;
use Keboola\Csv\CsvFile;
use Colors\Color;

$color = new Color();
$bundle = new Filesystem();
/*
 * Configuration
 */

define ( 'DOCSET_NAME', 'FileMaker');
define ( 'DOCSET_BUNDLE', DOCSET_NAME . '.docset');
define ( 'DOCSET_DESTINATION', __DIR__ . '/build/');
define ( 'FILEMAKER_BUNDLE', __DIR__ . '/FileMaker Help');

/* The directory containing the FileMaker Help Files */
$sourcePath = FILEMAKER_BUNDLE . '/Resources';
$htmlPath = $sourcePath . '/FMP_Help';
$path = $htmlPath;

/* Make sure the FileMaker Help bundle is in the project root. */
if ( ! $bundle->exists( FILEMAKER_BUNDLE ))
{
    echo $color( "FileMaker Help folder missing!\n" )->red->bold;
    die;
}

$htmlFiles = new DirectoryIterator ( $path );

$indexOutput = [];
$insertErrors = [];

$html_content = new Crawler();
/* Loop through an create the csv and add anchors. */
$i = 0;

echo $color( "Processing files...\n" )->green->bold;

$types = [
    'Command'   => [
        'index' => 'script-steps-alphabetical.html',
        'html_selector' => '.ssh-scriptheadAPL > a',
    ],
    'Function' => [
        'index' => 'functions-alphabetical.html',
        'html_selector' => '.fh-funcheadAPL > a',
    ],
    'Event'    => [
        'index' => 'script-triggers.html',
        'html_selector' => '.td-tabledata > .zh-hyper > a',
    ],
    'Error' => [
        'index' => 'error-codes.html',
        'html_extractor' => function(string $file, string $type, Crawler $html) use ($sourcePath, &$indexOutput) {
            $id_els = $html->filter('.ecn-errorcodenumber');

            $i = 0;
            foreach($id_els as $id_el) {
                $id = $id_el->textContent;
                $description = $id_el
                    ->parentNode
                    ->nextSibling
                    ->textContent;

                $item_relative_path = str_replace($sourcePath, "", $file);
                $indexOutput[$i]['name'] = "{$id} - {$description}";
                $indexOutput[$i]['type'] = $type;
                $indexOutput[$i]['path'] = "{$item_relative_path}";

                $i++;
            }
        },
    ],
];

$i = 0;
foreach($types as $type => $type_meta) {
    $file = "{$htmlPath}/{$type_meta['index']}";
    $file_content = file_get_contents($file);

    $html_content = new Crawler($file_content);
    $html_extractor = $type_meta['html_extractor'] ?? null;

    if (is_callable($html_extractor)) {
        $html_extractor($file, $type, $html_content);
        continue;
    }

    $html_selector = $type_meta['html_selector'];

    $els = $html_content->filter($type_meta['html_selector']);

    $results = $els->extract(['href', '_text']);

    foreach($results as $result) {
        $item_name = $result[1];

        $url = $result[0];
        $item_url_path = parse_url($url)['path'];
        $item_path = "{$htmlPath}/{$item_url_path}";
        $item_realpath = realpath($item_path);
        $item_relative_path = str_replace($sourcePath, "", $item_realpath);
        
        $indexOutput[$i]['name'] = $item_name;
        $indexOutput[$i]['type'] = $type;
        $indexOutput[$i]['path'] = $item_relative_path;

        $i++;
    }

}

if ( empty( $indexOutput )) {
    echo $color( " - No valid matches.\n" )->red->bold;
    echo $color( " - Index could not be built.\n" )->red->bold;
    die;
}

echo $color( "Building " . DOCSET_NAME . " docset...\n" )->green->bold;

/* Cleanup up any existing docset */
if ( $bundle->exists ( DOCSET_DESTINATION . DOCSET_BUNDLE ))
{
    echo $color( "   Deleting old " . DOCSET_BUNDLE . "...\n" )->red->bold;
    $bundle->remove ( DOCSET_DESTINATION . DOCSET_BUNDLE );
}

/* Create Docset Bundle Structure */
try
{
    $bundle->mkdir( DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/', 0777 );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy Icon */
try
{
    $bundle->copy( __DIR__ . '/resources/icon.png', DOCSET_DESTINATION . DOCSET_BUNDLE . '/icon.png' );
    $bundle->copy( __DIR__ . '/resources/icon@2x.png', DOCSET_DESTINATION . DOCSET_BUNDLE . '/icon@2x.png' );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy plist */
try
{
    $bundle->copy( __DIR__ . '/resources/Info.plist', DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Info.plist' );
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Copy Bundle Help Files */
try {
    $bundle->mirror ( $sourcePath, DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents');
} catch ( Exception $e ) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

/* Fix FMP Help JS */
$fix_fmp_files = [
    DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/index.html',
    DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/connect/scripts/common.js',
    DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/connect/search.html',
    DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/FMP_Help/scripts/common.js',
    DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/FMP_Help/scripts/page.js',
    DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/connect/scripts/page.js',
];

foreach($fix_fmp_files as $fmp_file) {
    $fmp_file_contents = file_get_contents($fmp_file);
    $fmp_file_contents = str_replace(
        [
            "Connect_Window.document.location.protocol === 'file:'",
            "Connect_Window.document.location.protocol !== 'file:'",
            "param_window.location.protocol === 'file:'",
            "accept = (param_event.origin.indexOf('file:') === 0);",
            "window.location.protocol === 'file:'",
            "window.document.location.protocol === 'file:'",
            "Page.window.document.location.protocol !== 'file:'",
        ],
        [
            "['file:', 'dfile:'].includes(Connect_Window.document.location.protocol)",
            "! ['file:', 'dfile:'].includes(Connect_Window.document.location.protocol)",
            "['file:', 'dfile:'].includes(param_window.location.protocol)",
            "accept = (param_event.origin.indexOf('file:') === 0 || param_event.origin.indexOf('dfile:') === 0);",
            "['file:', 'dfile:'].includes(window.location.protocol)",
            "['file:', 'dfile:'].includes(window.document.location.protocol)",
            "! ['file:', 'dfile:'].includes(Page.window.document.location.protocol)",
        ],
        $fmp_file_contents
    );
    file_put_contents($fmp_file, $fmp_file_contents);    
}

$indexFilename = 'docSet.dsidx';
$indexPath = DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/' . $indexFilename;
$colorsvIndexFilename = $indexFilename . 'csv';
$colorsvIndexPath = DOCSET_DESTINATION . DOCSET_BUNDLE . '/' . $indexFilename . '.csv.';

/* Delete any existing docset index. */
if ( file_exists ( $indexPath ))
{
    echo $color( "   Deleting existing $indexFilename...\n" )->red->bold;
    $bundle->remove( $indexPath );
}

/* Create docset index. */
echo $color( "   Generating index: $indexFilename...\n" )->green;

if ( $db = new SQLite3( $indexPath ))
{
    /* Create searchIndex Table */
    $colorreateQuery = "CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);";
    $colorreateQueryResults = @$db->query( $colorreateQuery );

    /* Check results of query. */
    if ( $colorreateQueryResults === false ) {
        echo $color( "   ERROR: Table creation failed. Generating CSV file: $colorsvIndexFilename...\n" )->red->bold;
        $colorsvFile = new CsvFile ( $colorsvIndexPath );
        foreach ( $indexOutput as $row ) {
            $colorsvFile->writeRow($row);
        }
    }

    /* Add indexing results to new table. */
    foreach ( $indexOutput as $row )
    {
        // $insertQuery = "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('" . $row['name'] ."','" . $row['type'] . "','" . $row['path'] . "');";
        $insertQuery = "INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (:name, :type, :path);";
        $insertPrepare = $db->prepare($insertQuery);
        $insertPrepare->bindValue('name', $row['name']);
        $insertPrepare->bindValue('type', $row['type']);
        $insertPrepare->bindValue('path', $row['path']);

        $insertQueryResults = @$insertPrepare->execute();
        if ( $insertQueryResults === false )
        {
            $insertErrors[] = [
                'query' => $insertQuery,
                'errorCode' => $db->lastErrorCode(),
                'errorMessage' => $db->lastErrorMsg(),
            ];
        }
    }
} else {
    die($err);
}


foreach($insertErrors as $index => $error) {
    if ($index === 0) {
        echo PHP_EOL . $color('Insert Errors')->red->bold . PHP_EOL;
    }
    echo $color("  #{$index}: [{$error['errorCode']}] {$error['errorMessage']}")->red . PHP_EOL;
    echo "    - Query: {$error['query']}" . PHP_EOL . PHP_EOL;
}

/* Remove Google Analytics Code */
echo $color( "Removing Google Analytics Code..." )->yellow->bold . PHP_EOL;
$all_files = glob(DOCSET_DESTINATION . DOCSET_BUNDLE . '/Contents/Resources/Documents/**/*.*');
foreach($all_files as $file) {
    if( ! fnmatch('*.html', $file) && ! fnmatch('*.js', $file)) {
        continue;
    }

    $contents = file_get_contents($file);

    if(stripos($contents, "GoogleAnalyticsObject") === false) {
        continue;
    }

    $contents_clean = preg_replace(
        '/<script((?!<\/script>).)*?GoogleAnalyticsObject((?!<\/script>).)*?<\/script>/s',
        '',
        $contents
    ) ?? $contents;

    file_put_contents($file, $contents_clean);
}

echo $color( "Docset generation complete!\n" )->green->bold;
echo $color( "    " . $bundle->makePathRelative ( DOCSET_DESTINATION . DOCSET_BUNDLE, __DIR__ ) )->green . PHP_EOL;